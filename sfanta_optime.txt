import numpy as np 
def isValid(mat,i,m):
    for j in range(1,m):
        if mat[i][j]<=mat[i][j-1] : return 0
    return 1
def countLines(mat,n,m):
    val=0
    for i in range (n):
        val=val+isValid(mat,i,m)
    return val
def detColumns(mat,n,m):
    columns=[]
    for j in range(m):
        min=mat[0][j]
        for i in range(1,m-1):
            if(mat[i][j]<min):
                min=mat[i][j]
        if min==5:columns.append(j)
    return columns
def bubbleMatrixLine(mat,i,m):
    for j in range(m):
        for k in range (0,m-j-1):
            if mat[i][k] > mat[i][k+1] : 
                mat[i][k], mat[i][k+1] = mat[i][k+1], mat[i][k] 
    return mat[i]
def insertMatrixColumn(mat,j,n):
    for i in range(1,n-1):
        val=mat[i][j-1]
        k=i-1
        while k>=0 and val<mat[k][j]:
            mat[k+1][j]=mat[k][j]
            k-=1 
        mat[k+1][j]=val
def cmmdc(a,b):
    if b==0: return a
    return cmmdc(b,a%b)
def matrixSum(matA,matB,n):
    matC=np.zeros([n,n],dtype="int")
    for i in range(n):
        for j in range(n):
            matC[i][j]=matA[i][j]+matB[i][j]
    return matC
def matrixMul(matA,matB,n):
    matC=np.zeros([n,n],dtype="int")
    for i in range(n):
        for j in range(n):
            for k in range(n):
                matC[i][j]+=matA[i][k]*matB[k][j]
    return matC
def powMatrix(matA,n,k):
    matB=matA
    for i in range(1,k):
        matB=matrixMul(matB,matA,n)
    return matB
def transMatrix(matA,n):
    matB=np.zeros([n,n],dtype="int")
    for i in range (n):
        for j in range(n):
            matB[j][i]=matA[i][j]
    return matB
def insertionArr(arr,n):
    for i in range(1,n):
        val=arr[i]
        j=i-1
        while j>=0 and val<arr[j]:
            arr[j+1]=arr[j]
            j-=1
        arr[j+1]=val
    return arr
def isIdentical(arr,n):
    for i in range(n):
        if arr[i]!=i+1: return "Nu este permutare identica"
    return "Este permutarea identica"
mat=np.zeros([4,5],dtype="int")
mat[:4,:5]=np.genfromtxt("mat.txt")
print("Matricea citita:")
print(mat)

#exercitiul 1
print("Numarul de linii cu elemente crescatoare este:")
print(countLines(mat,4,5))

#exercitiul 2
print("Coloane cu minimul egal cu 5 sunt:")
print(detColumns(mat,4,5))

#exercitiul 3
print("Alege o linie ce se va ordona. Valoarea trebuie sa fie mai mica decat 5:")
x=int(input())
print("Linia inainte de ordonare crescatoare prin BubbleSort:")
line=mat[x-1]
print(line)
print("Linia dupa ordonare crescatoare prin BubbleSort:")
print(bubbleMatrixLine(mat,x-1,5))

#exercitiul 4
print("\nAlege o coloana ce se va ordona. Valoarea trebuie sa fie mai mica decat 6:")
x=int(input())
print("\nColoana inainte de ordonare crescatoare prin BubbleSort:")
for i in range(4):
    print("%d" %mat[i][x-1])
print("\nColoana dupa ordonare crescatoare prin InsertSort:")
insertMatrixColumn(mat,x,5)
for i in range(4):
    print("%d" %mat[i][x])
    
#exercitiul 5
print("Introduceti cele 2 numere intregi de la tastatura:")
a=int(input())
b=int(input())
print("Cmmdc al celor doua numere introduse este:")
print(cmmdc(a,b))

#exercitiul 6
matA=np.zeros([5,5],dtype="int")
matB=np.zeros([5,5],dtype="int")
matA[:5,:5]=np.genfromtxt("matA.txt")
matB[:5,:5]=np.genfromtxt("matB.txt")
print("Suma celor 2 matrici A si B este:")
print(matrixSum(matA,matB,5))
print("Produsul celor 2 matrici A si B este:")
print(matrixMul(matA,matB,5))
print("Matricea A ridicata la puterea a 3-a:")
print(powMatrix(matA,5,3))
print("Matricea A transpusa:")
print(transMatrix(matA,5))

#exercitiul 7
arr=[3,8,5,2,1]
print("Vectorul sortat prin metoda insertiei este:")
print(insertionArr(arr,5))

#exercitiul 8
arr=[1,2,3,4,5,6]
arr1=[1,2,3,6,4,5]
print("Pentru arr:")
print(isIdentical(arr,6))
print("Pentru arr1:")
print(isIdentical(arr1,6))